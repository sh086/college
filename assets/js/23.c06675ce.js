(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{212:function(s,t,n){"use strict";n.r(t);var a=n(0),e=Object(a.a)({},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"微服务简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#微服务简介","aria-hidden":"true"}},[s._v("#")]),s._v(" 微服务简介")]),s._v(" "),n("p",[s._v("​\t　"),n("strong",[s._v("微服务")]),s._v("的最大进步在于改变了我们的工作方式，敏捷软件开发技术、应用迁移云端、DevOps文化、持续集成与持续部署（CI/CD）和容器应用都使用了微服务来革新应用开发与交付。微服务发展趋势是向"),n("strong",[s._v("标准化微服务框架")]),s._v("发展，目前常见的三种微服务解决方案如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Spring Boot + Spring Cloud Alibaba\nSpring Boot + Dubbo + Zookeeper \nSpring Boot + Spring Cloud Netflix 目前已停止更新，只进行维护\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("​\t　"),n("strong",[s._v("云计算服务")]),s._v("可以为微服务、大数据提供运维技术支持，云计算可以分为基础设施即服务（IaaS）、平台即服务（PaaS）、软件即服务（SaaS）、区块链即服务（BaaS）。")]),s._v(" "),n("blockquote",[n("p",[n("strong",[s._v("Ref")]),s._v("："),n("a",{attrs:{href:"https://www.funtl.com/zh/guide/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%A7%A3%E5%86%B3%E5%A4%8D%E6%9D%82%E9%97%AE%E9%A2%98.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("讲义"),n("OutboundLink")],1),s._v(" | "),n("a",{attrs:{href:"https://www.bilibili.com/video/av29384041",target:"_blank",rel:"noopener noreferrer"}},[s._v("视频合辑"),n("OutboundLink")],1)])]),s._v(" "),n("p",[n("strong",[s._v("文档：")])]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/senghoo/golang-design-pattern",target:"_blank",rel:"noopener noreferrer"}},[s._v("微服务从设计到部署"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"http://gdut_yy.gitee.io/doc-refact2/",target:"_blank",rel:"noopener noreferrer"}},[s._v("重构-改善既有代码的设计"),n("OutboundLink")],1)]),s._v(" "),n("li",[s._v("研磨设计模式")])]),s._v(" "),n("h2",{attrs:{id:"走进单体地狱"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#走进单体地狱","aria-hidden":"true"}},[s._v("#")]),s._v(" 走进单体地狱")]),s._v(" "),n("p",[s._v("​\t　单体应用多用于 "),n("strong",[s._v("项目规模较小、用户较少")]),s._v(" 或者 企业内部使用的应用，不适合开发具有高可用、高并发、高性能特性的互联网应用。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("① 开发：IDE专注于构建单体应用，可以很容易开发风格类似的单体应用模型\n② 测试：单体应用可以快速启动并使用如 Selenium 测试包来测试 UI 以轻松地实现端到端测试\n③ 发布：应用程序被作为一个单体易于打包和部署，只需拷贝打包好的应用程序到服务器上运行即可\n④ 运维：通过运行多个副本和结合负载均衡器，可以很方便的扩展单体应用\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("​\t　在项目的早期阶段，使用单体应用开发"),n("code",[s._v("互联网应用")]),s._v("也可以良好运作。但随着时间推移，小而简单的应用将会逐渐成长成一个"),n("strong",[s._v("庞大")]),s._v("、"),n("strong",[s._v("复杂")]),s._v("的单体，应用程序变得难以扩展，不可靠。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("① 敏捷开发和交付的任何一次尝试都将原地徘徊，正确修复 bug 和实现新功能变得非常困难而耗时\n② 应用启动时间的不断变长和因变更所需要进行的大量测试，导致复杂单体持续部署变得非常困难\n③ 当不同模块存在资源（CPU密集型和内存密集型）需求冲突时，单体应用可能难以扩展\n④ 任何模块的一个bug都可能会拖垮整个进程，影响到整个应用的可用性\n⑤ 单体应用使得采用新框架和语言变得非常困难\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"微服务解决复杂问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#微服务解决复杂问题","aria-hidden":"true"}},[s._v("#")]),s._v(" 微服务解决复杂问题")]),s._v(" "),n("p",[s._v("​\t　微服务将单体应用根据业务需求"),n("strong",[s._v("充分分解")]),s._v("成一套"),n("strong",[s._v("较小的互连服务")]),s._v("，以实现松耦合，"),n("strong",[s._v("达到应用敏捷开发和部署的目的")]),s._v("。每一个服务可以根据不同的业务需求选择"),n("strong",[s._v("相适应业务")]),s._v("的"),n("strong",[s._v("数据库模式")]),s._v("  和 "),n("strong",[s._v("用例部署场景")]),s._v("。")]),s._v(" "),n("p",[s._v("​\t　"),n("strong",[s._v("每个服务可由多个服务实例组成")]),s._v("，每个服务实例是一个Docker容器，为了实现高可用，容器是在多个云虚拟机上运行的。通过"),n("strong",[s._v("服务发现机制")]),s._v("使得服务能够发现"),n("strong",[s._v("需要与之通信的任何其他服务的位置")]),s._v("（主机和端口）。不同的服务用例之间不能直接通过 REST API 访问，而是需要通过 "),n("strong",[s._v("API 网关")]),s._v(" (API Gateway) 进行"),n("strong",[s._v("异步、基于消息的通信")]),s._v("(跨实例分发请求)，"),n("strong",[s._v("API 网关负责负载均衡、缓存、访问控制、 API 计量和监控")]),s._v("， 可以通过使用"),n("code",[s._v("NGINX")]),s._v(" 来实现。")]),s._v(" "),n("p",[s._v("（1） 自动微服务部署")]),s._v(" "),n("p",[s._v("​\t　一个单体应用可以很容易地部署到基于传统负载均衡器的一组相同服务器上，每个应用程序实例都配置基础设施服务的位置（主机和端口），比如数据库和消息代理。")]),s._v(" "),n("p",[s._v("​\t　相比之下，微服务应用程序通常由大量的服务组成，每个服务都有多个运行时实例、还有更多的移动部件需要配置、部署、扩展和监控。因此，要成功部署微服务应用程序，需要求开发人员能"),n("strong",[s._v("高度控制部署方式")]),s._v("和"),n("strong",[s._v("高度自动化")]),s._v("。一种自动化方式是使用现成的PaaS，如 Cloud Foundry；另一个方式是使用Kubernetes集群方案开发自己的 PaaS。")]),s._v(" "),n("p",[s._v("（2） CPA理论")]),s._v(" "),n("p",[s._v("​\t　CAP 理论指一个分布式系统最多只能同时满足"),n("strong",[s._v("一致性")]),s._v("（Consistency）、"),n("strong",[s._v("可用性")]),s._v("（Availability）和"),n("strong",[s._v("分区容错性")]),s._v("（Partition tolerance）这"),n("strong",[s._v("三项中的两项")]),s._v("。互联网应用常见的是必须保证C，P和A可根据业务选择。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("① 一致性：更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致\n② 可用性：服务一直可用，而且是正常响应时间\n③ 分区容错性：在遇到某节点或网络分区故障时，仍能对外提供满足一致性和可用性的服务\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("（3） 微服务优缺点")]),s._v(" "),n("p",[s._v("① 微服务的优点")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("① 使用微服务架构模式，个体服务能被更快地开发，并更容易理解与维护\n② 开发者可以自由选择与当前业务需求相适应的技术，此外使用当前技术重写旧服务将变得更加可行\n③ 微服务可以实现每个微服务独立部署，使得变更一经测试即可立即部署\n④ 微服务架构模式使得每个服务能够独立扩展，使用与服务资源要求最匹配的硬件\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("② 微服务的缺点")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("① 容易过多偏向于小型化服务的规模，而忽略充分分解业务需求以方便应用敏捷开发和部署的目标\n② 微服务是一个分布式系统，其使得整体变得复杂，容易出现局部故障\n③ 分区数据库架构难以实现分布式事务，不得不使用基于最终一致性的方法保证数据的一致性\n④ 测试某个微服务的功能时，需要启动该服务及其所依赖的所有服务\n⑤ 实现跨服务需求变更时，需要仔细规划和协调出现的变更至每个服务\n⑥ 部署基于微服务的应用程序是相当复杂的，需要求开发人员能 高度控制部署方式 和 高度自动化\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h2",{attrs:{id:"再谈微服务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#再谈微服务","aria-hidden":"true"}},[s._v("#")]),s._v(" 再谈微服务")])])},[],!1,null,null,null);t.default=e.exports}}]);