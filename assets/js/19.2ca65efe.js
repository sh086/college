(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{219:function(t,r,v){"use strict";v.r(r);var n=v(0),_=Object(n.a)({},function(){var t=this,r=t.$createElement,v=t._self._c||r;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"基础框架入门"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基础框架入门","aria-hidden":"true"}},[t._v("#")]),t._v(" 基础框架入门")]),t._v(" "),v("h2",{attrs:{id:"spring"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring","aria-hidden":"true"}},[t._v("#")]),t._v(" Spring")]),t._v(" "),v("p",[t._v("​\t　Spring 是一个分层的 "),v("code",[t._v("Java SE/EE full-stack")]),t._v("(一站式)轻量级开源框架，主要作用就是降低企业应用开发的复杂性（"),v("strong",[t._v("解耦")]),t._v("）。Spring 的核心是"),v("strong",[t._v("控制反转")]),t._v("（"),v("code",[t._v("IoC")]),t._v("）和"),v("strong",[t._v("面向切面编程")]),t._v("（"),v("code",[t._v("AOP")]),t._v("）。")]),t._v(" "),v("p",[v("strong",[t._v("参考资料：")])]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:""}},[t._v("第一个Spring应用程序")])])]),t._v(" "),v("h3",{attrs:{id:"spring特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring特性","aria-hidden":"true"}},[t._v("#")]),t._v(" Spring特性")]),t._v(" "),v("p",[t._v("​\t　Spring具有非侵入式的特性，Spring 框架的 API 不会在业务逻辑上出现，即业务逻辑是 POJO。由于业务逻辑中没有 Spring 的 API，所以业务逻辑可以从 Spring 框架快速的移植到其他框架， 即与环境无关。")]),t._v(" "),v("p",[t._v("​\t　Spring 作为一个容器，可以管理对象的生命周期、对象与对象之间的依赖关系。可以通过配置文件，来定义对象，以及设置与其他对象的依赖关系。")]),t._v(" "),v("p",[t._v("(1) 面向切面编程AOP")]),t._v(" "),v("p",[t._v("​\t　根据功能的不同，系统中的代码可以分为 "),v("strong",[t._v("主业务逻辑")]),t._v(" 与 "),v("strong",[t._v("系统级业务逻辑")]),t._v(" 两类。"),v("code",[t._v("主业务代码")]),t._v("间逻辑联系紧密，有具体的专业业务应用场景，复用性相对较低；"),v("code",[t._v("系统级业务")]),t._v("相对功能独立，没有具体的专业业务应用场景，主要是为主业务提供系统级服务，如日志、安全、事务、数据库连接等，"),v("strong",[t._v("复用性强")]),t._v("。")]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("如：JDBC来链接数据库：\n\t1、加载去掉（系统级业务逻辑）\n\t2、创建连接（系统级业务逻辑）\n\t3、开启事务（系统级业务逻辑）\n\t4、SQL操作 （主业务逻辑：银行业务、保险业务、电商业务、物流业务）\n\t5、提交事务（系统级业务逻辑）\n\t6、释放连接（系统级业务逻辑）\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br")])]),v("p",[t._v("​\t　我们可以把日志、安全、事务管理、数据库连接等服务理解成一个“"),v("strong",[t._v("切面")]),t._v("”，那么以前这些服务一直是直接写在业务逻辑的代码当中的，这有两点不好：首先"),v("strong",[t._v("业务逻辑不纯净")]),t._v("；其次这些服务被很多"),v("strong",[t._v("业务逻辑反复使用")]),t._v("，完全可以剥离出来做到复用。 "),v("strong",[t._v("AOP 可以把这些服务剥离出来形成一个“切面”")]),t._v("，然后将“切面”由 Spring 容器统一动态的“织入”到业务逻辑中，让业务逻辑能够享受到此“切面”的服务。")]),t._v(" "),v("p",[t._v("​\t　"),v("strong",[t._v("面向切面编程")]),t._v("（"),v("code",[t._v("AOP")]),t._v("，"),v("code",[t._v("Aspect Orient Programming")]),t._v("），是对面向对象编程思想 （"),v("code",[t._v("OOP")]),t._v("）的补充。Spring 提供了面向切面编程的丰富支持，允许通过分离应用的"),v("strong",[t._v("业务逻辑")]),t._v("与"),v("strong",[t._v("系统级服务")]),t._v("进行开发。"),v("strong",[t._v("应用对象只完成业务逻辑")]),t._v("，并不负责系统级服务。")]),t._v(" "),v("p",[t._v("(2) 控制反转IoC")]),t._v(" "),v("p",[t._v("​\t　"),v("strong",[t._v("控制反转")]),t._v("（"),v("code",[t._v("IoC")]),t._v("，"),v("code",[t._v("Inversion of Control")]),t._v("）就是将"),v("strong",[t._v("对象控制权")]),t._v("由"),v("code",[t._v("程序代码")]),v("strong",[t._v("反转")]),t._v("到"),v("code",[t._v("外部容器")]),t._v("，创建被调用者的实例不是由调用者（程序代码）完成，而是由 "),v("code",[t._v("外部容器")]),t._v(" 实现对对象的统一装配和管理。IoC 思想实现方式有 "),v("strong",[t._v("依赖注入")]),t._v("和 "),v("strong",[t._v("依赖查找")]),t._v(" 两种。")]),t._v(" "),v("p",[t._v("​\t　"),v("strong",[t._v("依赖注入")]),t._v(" ("),v("code",[t._v("Dependency Injection")]),t._v("，"),v("code",[t._v("DI")]),t._v(") 是指在对象初始化时不等对象请求，Spring容器就主动将依赖注入到调用者，"),v("strong",[t._v("依赖注入是目前最优秀的解耦方式")]),t._v("。依赖注入让 Spring 的 Bean 之间以配置文件的方式组织在一起，而不是以硬编码的方式耦合在一起的。")]),t._v(" "),v("p",[t._v("​\t　依赖查找（Dependency Lookup，DL），容器提供回调接口和上下文环境给组件，程序代码则需要提供具体的查找方式。比较典型的是依赖于 JNDI 系统的查找")]),t._v(" "),v("p",[t._v("(3) 非侵入式")]),t._v(" "),v("p",[t._v("​\t　Spring具有非侵入式的特性，Spring 框架的 API 不会在业务逻辑上出现，即业务逻辑是 POJO。由于业务逻辑中没有 Spring 的 API，所以业务逻辑可以从 Spring 框架快速的移植到其他框架， 即与环境无关。")]),t._v(" "),v("p",[t._v("(4) 容器")]),t._v(" "),v("p",[t._v("​\t　Spring 作为一个容器，可以管理对象的生命周期、对象与对象之间的依赖关系。可以通过配置文件，来定义对象，以及设置与其他对象的依赖关系。")]),t._v(" "),v("h3",{attrs:{id:"spring体系架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring体系架构","aria-hidden":"true"}},[t._v("#")]),t._v(" Spring体系架构")]),t._v(" "),v("p",[t._v("​\t　Spring 由 20 多个模块组成，它们可以分为 数据访问/集成（Data Access/Integration）、Web、"),v("strong",[t._v("面向切面编程")]),t._v("（AOP, Aspects）、应用服务器设备管理（Instrumentation）、消息发送（Messaging）、核心容器（Core Container）和测试（Test）。")]),t._v(" "),v("h2",{attrs:{id:"springweb"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#springweb","aria-hidden":"true"}},[t._v("#")]),t._v(" SpringWeb")]),t._v(" "),v("h2",{attrs:{id:"springmvc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#springmvc","aria-hidden":"true"}},[t._v("#")]),t._v(" SpringMvc")]),t._v(" "),v("h2",{attrs:{id:"mybatis"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mybatis","aria-hidden":"true"}},[t._v("#")]),t._v(" Mybatis")])])},[],!1,null,null,null);r.default=_.exports}}]);